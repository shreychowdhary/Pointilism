// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Pointilism

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

int width;
int height;
int skipWidth;
int skipHeight;
float size;
float lengthFactor;
float randomPositionFactor;
struct Vertex {
    float2 pos;
    float4 color;
};

RWStructuredBuffer<Vertex> vertices;
RWStructuredBuffer<float2> gradient;
Texture2D<float4> source;
RWTexture2D<float4> destination;
Texture2D<float4> depth;

float random(float2 st) {
    return frac(sin(dot(st,float2(12.9898, 78.233))) * 43758.5453123);
}

bool IsClockwise(float2 a, float2 b, float2 c) {
   return (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y) < 0;
}

float3 RGBToHSV(float3 c) {
    float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    float4 p = lerp( float4( c.bg, K.wz ), float4( c.gb, K.xy ), step( c.b, c.g ) );
    float4 q = lerp( float4( p.xyw, c.r ), float4( c.r, p.yzx ), step( p.x, c.r ) );
    float d = q.x - min( q.w, q.y );
    float e = 1.0e-10;
    return float3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

float3 HSVToRGB( float3 c ) {
    float4 K = float4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
    float3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
    return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
}

void drawOval(int index, float2 position, float2 gradient, float4 color) {
    float2 direction = (size + lengthFactor * sqrt(length(gradient))) * normalize(float2(-gradient.y, gradient.x));
    float2 perpendicular = size * normalize(gradient);

    Vertex v0, v1, v2, v3;

    v0.pos = position - direction - perpendicular;
    v1.pos = position - direction + perpendicular;
    v2.pos = position + direction + perpendicular;
    v3.pos = position + direction - perpendicular;

    v0.color = color;
    v1.color = color;
    v2.color = color;
    v3.color = color;

    vertices[6*index] = v0;
    vertices[6*index+1] = v1;
    vertices[6*index+2] = v2;
    vertices[6*index+3] = v2;
    vertices[6*index+4] = v3;
    vertices[6*index+5] = v0;

    if (!IsClockwise(v0.pos,v1.pos,v2.pos)) {
        vertices[6*index+1] = v2;
        vertices[6*index+2] = v1;
    }
    if (!IsClockwise(v2.pos,v3.pos,v0.pos)) {
        vertices[6*index+4] = v0;
        vertices[6*index+5] = v3;
    }
}

[numthreads(32,32,1)]
void Pointilism (uint3 id : SV_DispatchThreadID) {
    int x = id.x;
    int y = id.y;
    float dx = gradient[y*width+x].x;
    float dy = gradient[y*width+x].y;
    float2 grad = float2(dx,dy);
    gradient[y*width+x] = grad.xy;
    destination[id.xy] = source[id.xy];

    if ((x+1)%skipWidth == 0 && (y+1)%skipHeight == 0) {
        
        float2 position = float2(2*(x/(float)width)-1,2*(y/(float)height)-1);
        position += normalize(float2(fmod(random(position),1)-.5, fmod(random(position.yx),1)-.5))*randomPositionFactor;

        float3 hsvColor = RGBToHSV(source[id.xy].xyz) + float3(fmod(random(position),1)*.1-.05, fmod(random(position.yx),1)*.1-.05, 0);
        float4 color = float4(HSVToRGB(hsvColor),1);

        drawOval((y/skipHeight)*width/skipWidth+x/skipWidth, position, grad, color);
    }
}
